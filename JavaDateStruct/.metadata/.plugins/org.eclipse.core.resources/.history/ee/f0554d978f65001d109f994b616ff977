package recursion;

import java.util.Iterator;

//递归解迷宫问题
public class MiGongProblem {
	public static void main(String[] args) {
		int[][] map = new int[8][7];
		for (int i = 0; i < map.length; i++) {
			for (int j = 0; j < map[0].length; j++) {
				if (i == 0 || j == 0 || i == map.length - 1 || j == map[0].length - 1) {
					map[i][j] = 1;
				} else {
					map[i][j] = 0;
				}
			}
		}
		for (int i = 0; i < map.length; i++) {
			for (int j = 0; j < map[0].length; j++) {
				System.out.print(map[i][j] + "\t");
			}
			System.out.println();
			System.out.println();
		}
		
		setWay(map, 1, 1);
	}

	/**
	 * 
	 * @param map 传入的迷宫图
	 * @param i   从哪个位置开始找
	 * @param j
	 * @return 如果找到通路则返回true 没找到返回false
	 * 
	 *         约定：当map[i][j] = 0时表示没走过 ，=1 时表示墙 ，=2 时表示通路可以走 ，=3 时表示走过且路不通；
	 *         走迷宫时，需要确定一个策略：下->右->上->左
	 */
	public static boolean setWay(int[][] map, int i, int j) {
		if (map[6][5] == 2) {// 表示已经找到终点
			return true;
		} else {
			if (map[i][j] == 0) {// 表示该路没有被走过，而且也不是墙
				map[i][j] = 2; // 该点没被走过 假设它可以走通，下边判断是否走通，如果走不通直接返回false
				if (setWay(map, i + 1, j)) {// 向下走
					return true;
				} else if (setWay(map, i, j + 1)) {// 向右走
					return true;
				} else if (setWay(map, i - 1, j)) {// 向上走
					return true;
				} else if (setWay(map, i, j - 1)) {// 向左走
					return true;
				} else {
					map[i][j] = 3; // 四条路都走不通，把该点设置为3，表示走不通
					return false;
				}
			} else { // 如果
				return false;
			}
		}
	}
}
